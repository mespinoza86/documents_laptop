// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Simulate_HW_HH_
#define _Simulate_HW_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_ROW_LOOP_proc.h"
#include "Simulate_HW_AXILiteS_s_axi.h"

namespace ap_rtl {

template<unsigned int C_S_AXI_AXILITES_ADDR_WIDTH = 5,
         unsigned int C_S_AXI_AXILITES_DATA_WIDTH = 32>
struct Simulate_HW : public sc_module {
    // Port declarations 28
    sc_in< sc_logic > s_axi_AXILiteS_AWVALID;
    sc_out< sc_logic > s_axi_AXILiteS_AWREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_AWADDR;
    sc_in< sc_logic > s_axi_AXILiteS_WVALID;
    sc_out< sc_logic > s_axi_AXILiteS_WREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_WDATA;
    sc_in< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH/8> > s_axi_AXILiteS_WSTRB;
    sc_in< sc_logic > s_axi_AXILiteS_ARVALID;
    sc_out< sc_logic > s_axi_AXILiteS_ARREADY;
    sc_in< sc_uint<C_S_AXI_AXILITES_ADDR_WIDTH> > s_axi_AXILiteS_ARADDR;
    sc_out< sc_logic > s_axi_AXILiteS_RVALID;
    sc_in< sc_logic > s_axi_AXILiteS_RREADY;
    sc_out< sc_uint<C_S_AXI_AXILITES_DATA_WIDTH> > s_axi_AXILiteS_RDATA;
    sc_out< sc_lv<2> > s_axi_AXILiteS_RRESP;
    sc_out< sc_logic > s_axi_AXILiteS_BVALID;
    sc_in< sc_logic > s_axi_AXILiteS_BREADY;
    sc_out< sc_lv<2> > s_axi_AXILiteS_BRESP;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst_n;
    sc_out< sc_logic > interrupt;
    sc_in< sc_lv<32> > input_r_TDATA;
    sc_in< sc_lv<1> > input_r_TLAST;
    sc_out< sc_lv<32> > output_r_TDATA;
    sc_out< sc_lv<1> > output_r_TLAST;
    sc_in< sc_logic > input_r_TVALID;
    sc_out< sc_logic > input_r_TREADY;
    sc_out< sc_logic > output_r_TVALID;
    sc_in< sc_logic > output_r_TREADY;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    Simulate_HW(sc_module_name name);
    SC_HAS_PROCESS(Simulate_HW);

    ~Simulate_HW();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Simulate_HW_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>* Simulate_HW_AXILiteS_s_axi_U;
    Loop_ROW_LOOP_proc* Loop_ROW_LOOP_proc_U0;
    sc_signal< sc_logic > ap_rst_n_inv;
    sc_signal< sc_logic > ap_start;
    sc_signal< sc_logic > ap_ready;
    sc_signal< sc_logic > ap_done;
    sc_signal< sc_logic > ap_idle;
    sc_signal< sc_lv<32> > size;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_ap_ready;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_input_r_TREADY;
    sc_signal< sc_lv<32> > Loop_ROW_LOOP_proc_U0_output_r_TDATA;
    sc_signal< sc_logic > Loop_ROW_LOOP_proc_U0_output_r_TVALID;
    sc_signal< sc_lv<1> > Loop_ROW_LOOP_proc_U0_output_r_TLAST;
    sc_signal< sc_logic > ap_hs_continue;
    sc_signal< sc_logic > ap_hs_done;
    sc_signal< sc_logic > ap_hs_ready;
    static const int C_S_AXI_DATA_WIDTH;
    static const int C_S_AXI_WSTRB_WIDTH;
    static const int C_S_AXI_ADDR_WIDTH;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_Loop_ROW_LOOP_proc_U0_ap_continue();
    void thread_Loop_ROW_LOOP_proc_U0_ap_start();
    void thread_ap_done();
    void thread_ap_hs_continue();
    void thread_ap_hs_done();
    void thread_ap_hs_ready();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_rst_n_inv();
    void thread_input_r_TREADY();
    void thread_output_r_TDATA();
    void thread_output_r_TLAST();
    void thread_output_r_TVALID();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
