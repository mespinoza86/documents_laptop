// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Simulate_HW.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const int Simulate_HW::C_S_AXI_DATA_WIDTH = "100000";
const int Simulate_HW::C_S_AXI_WSTRB_WIDTH = "100";
const int Simulate_HW::C_S_AXI_ADDR_WIDTH = "100000";
const sc_logic Simulate_HW::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> Simulate_HW::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> Simulate_HW::ap_const_lv1_0 = "0";

Simulate_HW::Simulate_HW(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Simulate_HW_AXILiteS_s_axi_U = new Simulate_HW_AXILiteS_s_axi<C_S_AXI_AXILITES_ADDR_WIDTH,C_S_AXI_AXILITES_DATA_WIDTH>("Simulate_HW_AXILiteS_s_axi_U");
    Simulate_HW_AXILiteS_s_axi_U->AWVALID(s_axi_AXILiteS_AWVALID);
    Simulate_HW_AXILiteS_s_axi_U->AWREADY(s_axi_AXILiteS_AWREADY);
    Simulate_HW_AXILiteS_s_axi_U->AWADDR(s_axi_AXILiteS_AWADDR);
    Simulate_HW_AXILiteS_s_axi_U->WVALID(s_axi_AXILiteS_WVALID);
    Simulate_HW_AXILiteS_s_axi_U->WREADY(s_axi_AXILiteS_WREADY);
    Simulate_HW_AXILiteS_s_axi_U->WDATA(s_axi_AXILiteS_WDATA);
    Simulate_HW_AXILiteS_s_axi_U->WSTRB(s_axi_AXILiteS_WSTRB);
    Simulate_HW_AXILiteS_s_axi_U->ARVALID(s_axi_AXILiteS_ARVALID);
    Simulate_HW_AXILiteS_s_axi_U->ARREADY(s_axi_AXILiteS_ARREADY);
    Simulate_HW_AXILiteS_s_axi_U->ARADDR(s_axi_AXILiteS_ARADDR);
    Simulate_HW_AXILiteS_s_axi_U->RVALID(s_axi_AXILiteS_RVALID);
    Simulate_HW_AXILiteS_s_axi_U->RREADY(s_axi_AXILiteS_RREADY);
    Simulate_HW_AXILiteS_s_axi_U->RDATA(s_axi_AXILiteS_RDATA);
    Simulate_HW_AXILiteS_s_axi_U->RRESP(s_axi_AXILiteS_RRESP);
    Simulate_HW_AXILiteS_s_axi_U->BVALID(s_axi_AXILiteS_BVALID);
    Simulate_HW_AXILiteS_s_axi_U->BREADY(s_axi_AXILiteS_BREADY);
    Simulate_HW_AXILiteS_s_axi_U->BRESP(s_axi_AXILiteS_BRESP);
    Simulate_HW_AXILiteS_s_axi_U->ACLK(ap_clk);
    Simulate_HW_AXILiteS_s_axi_U->ARESET(ap_rst_n_inv);
    Simulate_HW_AXILiteS_s_axi_U->ACLK_EN(ap_var_for_const0);
    Simulate_HW_AXILiteS_s_axi_U->ap_start(ap_start);
    Simulate_HW_AXILiteS_s_axi_U->interrupt(interrupt);
    Simulate_HW_AXILiteS_s_axi_U->ap_ready(ap_ready);
    Simulate_HW_AXILiteS_s_axi_U->ap_done(ap_done);
    Simulate_HW_AXILiteS_s_axi_U->ap_idle(ap_idle);
    Simulate_HW_AXILiteS_s_axi_U->size(size);
    Loop_ROW_LOOP_proc_U0 = new Loop_ROW_LOOP_proc("Loop_ROW_LOOP_proc_U0");
    Loop_ROW_LOOP_proc_U0->ap_clk(ap_clk);
    Loop_ROW_LOOP_proc_U0->ap_rst(ap_rst_n_inv);
    Loop_ROW_LOOP_proc_U0->ap_start(Loop_ROW_LOOP_proc_U0_ap_start);
    Loop_ROW_LOOP_proc_U0->ap_done(Loop_ROW_LOOP_proc_U0_ap_done);
    Loop_ROW_LOOP_proc_U0->ap_continue(Loop_ROW_LOOP_proc_U0_ap_continue);
    Loop_ROW_LOOP_proc_U0->ap_idle(Loop_ROW_LOOP_proc_U0_ap_idle);
    Loop_ROW_LOOP_proc_U0->ap_ready(Loop_ROW_LOOP_proc_U0_ap_ready);
    Loop_ROW_LOOP_proc_U0->size(size);
    Loop_ROW_LOOP_proc_U0->input_r_TDATA(input_r_TDATA);
    Loop_ROW_LOOP_proc_U0->input_r_TVALID(input_r_TVALID);
    Loop_ROW_LOOP_proc_U0->input_r_TREADY(Loop_ROW_LOOP_proc_U0_input_r_TREADY);
    Loop_ROW_LOOP_proc_U0->input_r_TLAST(input_r_TLAST);
    Loop_ROW_LOOP_proc_U0->output_r_TDATA(Loop_ROW_LOOP_proc_U0_output_r_TDATA);
    Loop_ROW_LOOP_proc_U0->output_r_TVALID(Loop_ROW_LOOP_proc_U0_output_r_TVALID);
    Loop_ROW_LOOP_proc_U0->output_r_TREADY(output_r_TREADY);
    Loop_ROW_LOOP_proc_U0->output_r_TLAST(Loop_ROW_LOOP_proc_U0_output_r_TLAST);

    SC_METHOD(thread_Loop_ROW_LOOP_proc_U0_ap_continue);

    SC_METHOD(thread_Loop_ROW_LOOP_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_done);
    sensitive << ( Loop_ROW_LOOP_proc_U0_ap_done );

    SC_METHOD(thread_ap_hs_continue);

    SC_METHOD(thread_ap_hs_done);
    sensitive << ( Loop_ROW_LOOP_proc_U0_ap_done );

    SC_METHOD(thread_ap_hs_ready);
    sensitive << ( Loop_ROW_LOOP_proc_U0_ap_ready );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_ROW_LOOP_proc_U0_ap_idle );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_ROW_LOOP_proc_U0_ap_ready );

    SC_METHOD(thread_ap_rst_n_inv);
    sensitive << ( ap_rst_n );

    SC_METHOD(thread_input_r_TREADY);
    sensitive << ( Loop_ROW_LOOP_proc_U0_input_r_TREADY );

    SC_METHOD(thread_output_r_TDATA);
    sensitive << ( Loop_ROW_LOOP_proc_U0_output_r_TDATA );

    SC_METHOD(thread_output_r_TLAST);
    sensitive << ( Loop_ROW_LOOP_proc_U0_output_r_TLAST );

    SC_METHOD(thread_output_r_TVALID);
    sensitive << ( Loop_ROW_LOOP_proc_U0_output_r_TVALID );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Simulate_HW_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, s_axi_AXILiteS_AWVALID, "(port)s_axi_AXILiteS_AWVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWREADY, "(port)s_axi_AXILiteS_AWREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_AWADDR, "(port)s_axi_AXILiteS_AWADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_WVALID, "(port)s_axi_AXILiteS_WVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_WREADY, "(port)s_axi_AXILiteS_WREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_WDATA, "(port)s_axi_AXILiteS_WDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_WSTRB, "(port)s_axi_AXILiteS_WSTRB");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARVALID, "(port)s_axi_AXILiteS_ARVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARREADY, "(port)s_axi_AXILiteS_ARREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_ARADDR, "(port)s_axi_AXILiteS_ARADDR");
    sc_trace(mVcdFile, s_axi_AXILiteS_RVALID, "(port)s_axi_AXILiteS_RVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_RREADY, "(port)s_axi_AXILiteS_RREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_RDATA, "(port)s_axi_AXILiteS_RDATA");
    sc_trace(mVcdFile, s_axi_AXILiteS_RRESP, "(port)s_axi_AXILiteS_RRESP");
    sc_trace(mVcdFile, s_axi_AXILiteS_BVALID, "(port)s_axi_AXILiteS_BVALID");
    sc_trace(mVcdFile, s_axi_AXILiteS_BREADY, "(port)s_axi_AXILiteS_BREADY");
    sc_trace(mVcdFile, s_axi_AXILiteS_BRESP, "(port)s_axi_AXILiteS_BRESP");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst_n, "(port)ap_rst_n");
    sc_trace(mVcdFile, interrupt, "(port)interrupt");
    sc_trace(mVcdFile, input_r_TDATA, "(port)input_r_TDATA");
    sc_trace(mVcdFile, input_r_TLAST, "(port)input_r_TLAST");
    sc_trace(mVcdFile, output_r_TDATA, "(port)output_r_TDATA");
    sc_trace(mVcdFile, output_r_TLAST, "(port)output_r_TLAST");
    sc_trace(mVcdFile, input_r_TVALID, "(port)input_r_TVALID");
    sc_trace(mVcdFile, input_r_TREADY, "(port)input_r_TREADY");
    sc_trace(mVcdFile, output_r_TVALID, "(port)output_r_TVALID");
    sc_trace(mVcdFile, output_r_TREADY, "(port)output_r_TREADY");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_rst_n_inv, "ap_rst_n_inv");
    sc_trace(mVcdFile, ap_start, "ap_start");
    sc_trace(mVcdFile, ap_ready, "ap_ready");
    sc_trace(mVcdFile, ap_done, "ap_done");
    sc_trace(mVcdFile, ap_idle, "ap_idle");
    sc_trace(mVcdFile, size, "size");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_ap_start, "Loop_ROW_LOOP_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_ap_done, "Loop_ROW_LOOP_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_ap_continue, "Loop_ROW_LOOP_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_ap_idle, "Loop_ROW_LOOP_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_ap_ready, "Loop_ROW_LOOP_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_input_r_TREADY, "Loop_ROW_LOOP_proc_U0_input_r_TREADY");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_output_r_TDATA, "Loop_ROW_LOOP_proc_U0_output_r_TDATA");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_output_r_TVALID, "Loop_ROW_LOOP_proc_U0_output_r_TVALID");
    sc_trace(mVcdFile, Loop_ROW_LOOP_proc_U0_output_r_TLAST, "Loop_ROW_LOOP_proc_U0_output_r_TLAST");
    sc_trace(mVcdFile, ap_hs_continue, "ap_hs_continue");
    sc_trace(mVcdFile, ap_hs_done, "ap_hs_done");
    sc_trace(mVcdFile, ap_hs_ready, "ap_hs_ready");
#endif

    }
    mHdltvinHandle.open("Simulate_HW.hdltvin.dat");
    mHdltvoutHandle.open("Simulate_HW.hdltvout.dat");
}

Simulate_HW::~Simulate_HW() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Simulate_HW_AXILiteS_s_axi_U;
    delete Loop_ROW_LOOP_proc_U0;
}

void Simulate_HW::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Simulate_HW::thread_Loop_ROW_LOOP_proc_U0_ap_continue() {
    Loop_ROW_LOOP_proc_U0_ap_continue = ap_const_logic_1;
}

void Simulate_HW::thread_Loop_ROW_LOOP_proc_U0_ap_start() {
    Loop_ROW_LOOP_proc_U0_ap_start = ap_start.read();
}

void Simulate_HW::thread_ap_done() {
    ap_done = Loop_ROW_LOOP_proc_U0_ap_done.read();
}

void Simulate_HW::thread_ap_hs_continue() {
    ap_hs_continue = ap_const_logic_1;
}

void Simulate_HW::thread_ap_hs_done() {
    ap_hs_done = Loop_ROW_LOOP_proc_U0_ap_done.read();
}

void Simulate_HW::thread_ap_hs_ready() {
    ap_hs_ready = Loop_ROW_LOOP_proc_U0_ap_ready.read();
}

void Simulate_HW::thread_ap_idle() {
    ap_idle = Loop_ROW_LOOP_proc_U0_ap_idle.read();
}

void Simulate_HW::thread_ap_ready() {
    ap_ready = Loop_ROW_LOOP_proc_U0_ap_ready.read();
}

void Simulate_HW::thread_ap_rst_n_inv() {
    ap_rst_n_inv =  (sc_logic) (~ap_rst_n.read());
}

void Simulate_HW::thread_input_r_TREADY() {
    input_r_TREADY = Loop_ROW_LOOP_proc_U0_input_r_TREADY.read();
}

void Simulate_HW::thread_output_r_TDATA() {
    output_r_TDATA = Loop_ROW_LOOP_proc_U0_output_r_TDATA.read();
}

void Simulate_HW::thread_output_r_TLAST() {
    output_r_TLAST = Loop_ROW_LOOP_proc_U0_output_r_TLAST.read();
}

void Simulate_HW::thread_output_r_TVALID() {
    output_r_TVALID = Loop_ROW_LOOP_proc_U0_output_r_TVALID.read();
}

void Simulate_HW::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWVALID\" :  \"" << s_axi_AXILiteS_AWVALID.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"s_axi_AXILiteS_AWREADY\" :  \"" << s_axi_AXILiteS_AWREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_AWADDR\" :  \"" << s_axi_AXILiteS_AWADDR.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WVALID\" :  \"" << s_axi_AXILiteS_WVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_WREADY\" :  \"" << s_axi_AXILiteS_WREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WDATA\" :  \"" << s_axi_AXILiteS_WDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_WSTRB\" :  \"" << s_axi_AXILiteS_WSTRB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARVALID\" :  \"" << s_axi_AXILiteS_ARVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_ARREADY\" :  \"" << s_axi_AXILiteS_ARREADY.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_ARADDR\" :  \"" << s_axi_AXILiteS_ARADDR.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RVALID\" :  \"" << s_axi_AXILiteS_RVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_RREADY\" :  \"" << s_axi_AXILiteS_RREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RDATA\" :  \"" << s_axi_AXILiteS_RDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_RRESP\" :  \"" << s_axi_AXILiteS_RRESP.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BVALID\" :  \"" << s_axi_AXILiteS_BVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"s_axi_AXILiteS_BREADY\" :  \"" << s_axi_AXILiteS_BREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"s_axi_AXILiteS_BRESP\" :  \"" << s_axi_AXILiteS_BRESP.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst_n\" :  \"" << ap_rst_n.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"interrupt\" :  \"" << interrupt.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TDATA\" :  \"" << input_r_TDATA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TLAST\" :  \"" << input_r_TLAST.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TDATA\" :  \"" << output_r_TDATA.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TLAST\" :  \"" << output_r_TLAST.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_TVALID\" :  \"" << input_r_TVALID.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_TREADY\" :  \"" << input_r_TREADY.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_TVALID\" :  \"" << output_r_TVALID.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"output_r_TREADY\" :  \"" << output_r_TREADY.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

