-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2016.4
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity Simulate_HW is
generic (
    C_S_AXI_AXILITES_ADDR_WIDTH : INTEGER := 5;
    C_S_AXI_AXILITES_DATA_WIDTH : INTEGER := 32 );
port (
    s_axi_AXILiteS_AWVALID : IN STD_LOGIC;
    s_axi_AXILiteS_AWREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_WVALID : IN STD_LOGIC;
    s_axi_AXILiteS_WREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH/8-1 downto 0);
    s_axi_AXILiteS_ARVALID : IN STD_LOGIC;
    s_axi_AXILiteS_ARREADY : OUT STD_LOGIC;
    s_axi_AXILiteS_ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_AXILITES_ADDR_WIDTH-1 downto 0);
    s_axi_AXILiteS_RVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_RREADY : IN STD_LOGIC;
    s_axi_AXILiteS_RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_AXILITES_DATA_WIDTH-1 downto 0);
    s_axi_AXILiteS_RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    s_axi_AXILiteS_BVALID : OUT STD_LOGIC;
    s_axi_AXILiteS_BREADY : IN STD_LOGIC;
    s_axi_AXILiteS_BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst_n : IN STD_LOGIC;
    interrupt : OUT STD_LOGIC;
    input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
    input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
    output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0);
    input_r_TVALID : IN STD_LOGIC;
    input_r_TREADY : OUT STD_LOGIC;
    output_r_TVALID : OUT STD_LOGIC;
    output_r_TREADY : IN STD_LOGIC );
end;


architecture behav of Simulate_HW is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "Simulate_HW,hls_ip_2016_4,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=6.061600,HLS_SYN_LAT=52781,HLS_SYN_TPT=52782,HLS_SYN_MEM=0,HLS_SYN_DSP=156,HLS_SYN_FF=26349,HLS_SYN_LUT=32278}";
    constant C_S_AXI_DATA_WIDTH : INTEGER range 63 downto 0 := 20;
    constant C_S_AXI_WSTRB_WIDTH : INTEGER range 63 downto 0 := 4;
    constant C_S_AXI_ADDR_WIDTH : INTEGER range 63 downto 0 := 20;
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";

    signal ap_rst_n_inv : STD_LOGIC;
    signal ap_start : STD_LOGIC;
    signal ap_ready : STD_LOGIC;
    signal ap_done : STD_LOGIC;
    signal ap_idle : STD_LOGIC;
    signal size : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_ROW_LOOP_proc_U0_ap_start : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_ap_done : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_input_r_TREADY : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_output_r_TDATA : STD_LOGIC_VECTOR (31 downto 0);
    signal Loop_ROW_LOOP_proc_U0_output_r_TVALID : STD_LOGIC;
    signal Loop_ROW_LOOP_proc_U0_output_r_TLAST : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_hs_continue : STD_LOGIC;
    signal ap_hs_done : STD_LOGIC;
    signal ap_hs_ready : STD_LOGIC;

    component Loop_ROW_LOOP_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        size : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_TDATA : IN STD_LOGIC_VECTOR (31 downto 0);
        input_r_TVALID : IN STD_LOGIC;
        input_r_TREADY : OUT STD_LOGIC;
        input_r_TLAST : IN STD_LOGIC_VECTOR (0 downto 0);
        output_r_TDATA : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_r_TVALID : OUT STD_LOGIC;
        output_r_TREADY : IN STD_LOGIC;
        output_r_TLAST : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component Simulate_HW_AXILiteS_s_axi IS
    generic (
        C_S_AXI_ADDR_WIDTH : INTEGER;
        C_S_AXI_DATA_WIDTH : INTEGER );
    port (
        AWVALID : IN STD_LOGIC;
        AWREADY : OUT STD_LOGIC;
        AWADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        WVALID : IN STD_LOGIC;
        WREADY : OUT STD_LOGIC;
        WDATA : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        WSTRB : IN STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH/8-1 downto 0);
        ARVALID : IN STD_LOGIC;
        ARREADY : OUT STD_LOGIC;
        ARADDR : IN STD_LOGIC_VECTOR (C_S_AXI_ADDR_WIDTH-1 downto 0);
        RVALID : OUT STD_LOGIC;
        RREADY : IN STD_LOGIC;
        RDATA : OUT STD_LOGIC_VECTOR (C_S_AXI_DATA_WIDTH-1 downto 0);
        RRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        BVALID : OUT STD_LOGIC;
        BREADY : IN STD_LOGIC;
        BRESP : OUT STD_LOGIC_VECTOR (1 downto 0);
        ACLK : IN STD_LOGIC;
        ARESET : IN STD_LOGIC;
        ACLK_EN : IN STD_LOGIC;
        ap_start : OUT STD_LOGIC;
        interrupt : OUT STD_LOGIC;
        ap_ready : IN STD_LOGIC;
        ap_done : IN STD_LOGIC;
        ap_idle : IN STD_LOGIC;
        size : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    Simulate_HW_AXILiteS_s_axi_U : component Simulate_HW_AXILiteS_s_axi
    generic map (
        C_S_AXI_ADDR_WIDTH => C_S_AXI_AXILITES_ADDR_WIDTH,
        C_S_AXI_DATA_WIDTH => C_S_AXI_AXILITES_DATA_WIDTH)
    port map (
        AWVALID => s_axi_AXILiteS_AWVALID,
        AWREADY => s_axi_AXILiteS_AWREADY,
        AWADDR => s_axi_AXILiteS_AWADDR,
        WVALID => s_axi_AXILiteS_WVALID,
        WREADY => s_axi_AXILiteS_WREADY,
        WDATA => s_axi_AXILiteS_WDATA,
        WSTRB => s_axi_AXILiteS_WSTRB,
        ARVALID => s_axi_AXILiteS_ARVALID,
        ARREADY => s_axi_AXILiteS_ARREADY,
        ARADDR => s_axi_AXILiteS_ARADDR,
        RVALID => s_axi_AXILiteS_RVALID,
        RREADY => s_axi_AXILiteS_RREADY,
        RDATA => s_axi_AXILiteS_RDATA,
        RRESP => s_axi_AXILiteS_RRESP,
        BVALID => s_axi_AXILiteS_BVALID,
        BREADY => s_axi_AXILiteS_BREADY,
        BRESP => s_axi_AXILiteS_BRESP,
        ACLK => ap_clk,
        ARESET => ap_rst_n_inv,
        ACLK_EN => ap_const_logic_1,
        ap_start => ap_start,
        interrupt => interrupt,
        ap_ready => ap_ready,
        ap_done => ap_done,
        ap_idle => ap_idle,
        size => size);

    Loop_ROW_LOOP_proc_U0 : component Loop_ROW_LOOP_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst_n_inv,
        ap_start => Loop_ROW_LOOP_proc_U0_ap_start,
        ap_done => Loop_ROW_LOOP_proc_U0_ap_done,
        ap_continue => Loop_ROW_LOOP_proc_U0_ap_continue,
        ap_idle => Loop_ROW_LOOP_proc_U0_ap_idle,
        ap_ready => Loop_ROW_LOOP_proc_U0_ap_ready,
        size => size,
        input_r_TDATA => input_r_TDATA,
        input_r_TVALID => input_r_TVALID,
        input_r_TREADY => Loop_ROW_LOOP_proc_U0_input_r_TREADY,
        input_r_TLAST => input_r_TLAST,
        output_r_TDATA => Loop_ROW_LOOP_proc_U0_output_r_TDATA,
        output_r_TVALID => Loop_ROW_LOOP_proc_U0_output_r_TVALID,
        output_r_TREADY => output_r_TREADY,
        output_r_TLAST => Loop_ROW_LOOP_proc_U0_output_r_TLAST);




    Loop_ROW_LOOP_proc_U0_ap_continue <= ap_const_logic_1;
    Loop_ROW_LOOP_proc_U0_ap_start <= ap_start;
    ap_done <= Loop_ROW_LOOP_proc_U0_ap_done;
    ap_hs_continue <= ap_const_logic_1;
    ap_hs_done <= Loop_ROW_LOOP_proc_U0_ap_done;
    ap_hs_ready <= Loop_ROW_LOOP_proc_U0_ap_ready;
    ap_idle <= Loop_ROW_LOOP_proc_U0_ap_idle;
    ap_ready <= Loop_ROW_LOOP_proc_U0_ap_ready;

    ap_rst_n_inv_assign_proc : process(ap_rst_n)
    begin
                ap_rst_n_inv <= not(ap_rst_n);
    end process;

    input_r_TREADY <= Loop_ROW_LOOP_proc_U0_input_r_TREADY;
    output_r_TDATA <= Loop_ROW_LOOP_proc_U0_output_r_TDATA;
    output_r_TLAST <= Loop_ROW_LOOP_proc_U0_output_r_TLAST;
    output_r_TVALID <= Loop_ROW_LOOP_proc_U0_output_r_TVALID;
end behav;
